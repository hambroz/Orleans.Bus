<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

#if GRAIN_STUBBING_ENABLED
using Orleans.Bus.Stubs;
#endif 

namespace Orleans.Bus
{
    /// <summary>
    /// Base class for all kinds of message based grains
    /// </summary>
    public abstract class MessageBasedGrain : GrainBase, IGrain
        #if GRAIN_STUBBING_ENABLED
            , IStubbedMessageGrain
        #endif
    {
<#@ include file="GrainCommon.cs" #>
	}

    /// <summary>
    /// Base class for all kinds of persistent message based grains
    /// </summary>
    public abstract class MessageBasedGrain<TState> : GrainBase<TState>, IGrain
        #if GRAIN_STUBBING_ENABLED
            , IStubbedMessageGrain
            , IStubState<TState>
        #endif	 
        where TState : class, IGrainState
    {
<#@ include file="GrainCommon.cs" #>
		        
		#if GRAIN_STUBBING_ENABLED

        void IStubState<TState>.SetState(TState state)
        {
			#if DEBUG
			explicitState = state;
			#endif
		}
				
		TState explicitState;
       
		/// <summary>
        /// Gets grain's state
        /// </summary>
        protected new TState State
        {
            get { return explicitState; }
        }

		#endif
	}

<#string[] ids = new string[]{"Guid", "Int64", "String"};#>
<#foreach (var id in ids) {#>
    /// <summary>
    /// Base class for message based grains identifiable by <see cref="<#= id #>"/> identifier
    /// </summary>
    public abstract class MessageBasedGrainWith<#= id #>Id : MessageBasedGrain, IHave<#= id #>Id
        #if GRAIN_STUBBING_ENABLED
            , IStub<#= id #>Id
        #endif	
    {
<# WriteIdBlock(id); #>
    }

<#}#>
<#foreach (var id in ids) {#>
    /// <summary>
    /// Base class for persistent message based grains identifiable by <see cref="<#= id #>"/> identifier
    /// </summary>
    public abstract class MessageBasedGrainWith<#= id #>Id<TState> : MessageBasedGrain<TState>, IHave<#= id #>Id
        #if GRAIN_STUBBING_ENABLED
            , IStub<#= id #>Id
        #endif
	        where TState : class, IGrainState
    {
<# WriteIdBlock(id); #>		
    }

<#}#>
<#foreach (var id in ids) {#>
    /// <summary>
    /// Base class for observable message based grains identifiable by <see cref="<#= id #>"/> identifier
    /// </summary>
    public abstract class ObservableMessageBasedGrainWith<#= id #>Id : MessageBasedGrain, IObservableGrain, IHave<#= id #>Id
        #if GRAIN_STUBBING_ENABLED
            , IStubbedObservableMessageGrain
            , IStub<#= id #>Id
        #endif
    {
<#@ include file="ObservableGrainCommon.cs" #>
<# WriteObservableBlock(id); #>		
    }

<#}#>
<#foreach (var id in ids) {#>
    /// <summary>
    /// Base class for persistent observable message based grains identifiable by <see cref="<#= id #>"/> identifier
    /// </summary>
    public abstract class ObservableMessageBasedGrainWith<#= id #>Id<TGrainState> : MessageBasedGrain<TGrainState>, IObservableGrain, IHave<#= id #>Id
        #if GRAIN_STUBBING_ENABLED
            , IStubbedObservableMessageGrain
            , IStub<#= id #>Id
        #endif
        where TGrainState : class, IGrainState
    {
<#@ include file="ObservableGrainCommon.cs" #>
<# WriteObservableBlock(id); #>
	}

<#}#>
}
<#+
private void WriteIdBlock(string id)
{#>
		#if GRAIN_STUBBING_ENABLED
		
        void IStub<#= id #>Id.SetId(<#= id #> id)
        {
			explicitId = id;
		}
		        
		<#= id #> explicitId;       	

		#endif

        /// <summary>
        /// Gets identifier of the current grain.
        /// </summary>
        /// <returns><see cref="<#= id #>"/> identifier</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected <#= id #> Id()
        {
			#if GRAIN_STUBBING_ENABLED
			return explicitId;
			#else
			return Identity.Of(this);
			#endif
        }
<#+
}
#>
<#+
private void WriteNotifyBlock()
{#>
	    /// <summary>
        /// Notifies all attached observers registered for a particular type of event,
		/// passing given event to each of them.
        /// </summary>
        /// <typeparam name="TEvent">The type of event</typeparam>
        /// <param name="e">The event of <typeparamref name="TEvent"/> type</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        protected void Notify<TEvent>(TEvent e)
        {
            observers.Notify(Id(), e);
        }
<#+
}
#>
<#+private void WriteObservableBlock(string id)
{
	WriteIdBlock(id);
	WriteLine("");
	WriteNotifyBlock();
}
#>